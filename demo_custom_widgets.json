{
  "widgetsBundle": {
    "alias": "demo_custom_widgets",
    "title": "Demo Custom Widgets",
    "image": null
  },
  "widgetTypes": [
    {
      "alias": "aeration_widget",
      "name": "Aeration status",
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "<div flex layout=\"row\">\n    <div class=\"svg-wrapper\">\n        <svg class=\"svg_2\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 612 612\">\n <g>\n  <path id=\"svg_2\" d=\"m600.507,0l-589.012,0c-6.347,0 -11.494,5.147 -11.494,11.496l0,589.01c0,6.349 5.147,11.494 11.494,11.494l589.01,0c6.347,0 11.494,-5.145 11.494,-11.494l0,-589.01c0.002,-6.349 -5.145,-11.496 -11.492,-11.496zm-572.353,46.968c0,-10.389 8.424,-18.815 18.817,-18.815c10.397,0 18.817,8.426 18.817,18.815c0,10.397 -8.42,18.817 -18.817,18.817c-10.393,-0.001 -18.817,-8.421 -18.817,-18.817zm277.847,504.9c-135.785,0 -245.87,-110.079 -245.87,-245.868s110.085,-245.868 245.87,-245.868c135.783,0 245.874,110.079 245.874,245.868s-110.091,245.868 -245.874,245.868zm259.034,31.981c-10.397,0 -18.817,-8.426 -18.817,-18.817c0,-10.397 8.42,-18.815 18.817,-18.815c10.385,0 18.813,8.42 18.813,18.815c0,10.391 -8.426,18.817 -18.813,18.817z\"/>\n </g>\n</svg>\n<svg class=\"svg_1\" viewBox=\"0 0 612 612\" xmlns=\"http://www.w3.org/2000/svg\">\n <g>\n  <path id=\"svg_1\" ng-style=\"status == 'ON' && {'fill':'green'} || status == 'OFF' && {'fill':'#a41313'}\" d=\"m515.491,347.273l-150.343,-48.133a56.304,56.304 0 0 0 -2.573,-12.936a590.935,590.935 0 0 0 19.506,-6.955c59.815,-22.559 94.284,-47.785 102.447,-74.979c5.43,-18.091 -0.354,-36.035 -17.187,-53.336c-13.279,-13.649 -42.628,-34.07 -43.872,-34.931c-4.7,-3.262 -11.142,-2.152 -14.479,2.487l-92.931,129.078a56.825,56.825 0 0 0 -7.307,-0.488a56.77,56.77 0 0 0 -5.058,0.238c-0.408,-47.517 -6.297,-108.07 -31.19,-135.539c-9.669,-10.67 -21.449,-16.082 -35.015,-16.082l-0.002,0c-9.316,0 -19.448,2.662 -30.108,7.911c-13.205,6.504 -33.216,20.884 -42.181,27.502c-2.631,1.943 -4.319,3.223 -4.593,3.43a10.467,10.467 0 0 0 -4.127,8.825a10.425,10.425 0 0 0 2.017,5.716l97.799,133.387a56.232,56.232 0 0 0 -2.617,8.217c-31.962,-10.418 -72.041,-20.787 -105.023,-20.787c-25.975,0 -44.827,6.558 -56.027,19.49c-9.87,11.395 -13.436,27.152 -10.594,46.838c2.725,18.844 14.467,52.61 14.967,54.039c1.504,4.315 5.553,7.029 9.891,7.029c1.09,0 2.195,-0.17 3.283,-0.53l159.207,-52.49a56.944,56.944 0 0 0 5.606,4.791c-5.524,7.565 -11.258,15.743 -16.897,24.314c-35.133,53.406 -48.191,94.075 -38.811,120.872c6.243,17.83 21.471,28.95 45.262,33.052c12.286,2.12 31.687,2.565 45.802,2.565c6.125,0 10.209,-0.089 10.209,-0.089c5.716,-0.122 10.28,-4.804 10.255,-10.522l-0.701,-163.187a56.492,56.492 0 0 0 8.953,-4.64c4.638,6.322 9.57,12.841 14.812,19.413c39.6,49.625 74.011,74.789 102.278,74.789c13.323,0 32.206,-5.697 46.505,-32.841c8.871,-16.842 19.237,-51.062 19.672,-52.509c1.655,-5.475 -1.388,-11.265 -6.835,-13.009zm-206.741,-14.562c-16.031,0 -29.033,-13 -29.033,-29.037s13.002,-29.035 29.033,-29.035c16.037,0 29.037,12.998 29.037,29.035c0,16.038 -13,29.037 -29.037,29.037z\"/>\n </g>\n</svg>\n    </div>\n    <div class=\"value-container\"><span ng-style=\"status == 'ON' && {'color':'green'} || status == 'OFF' && {'color':'#a41313'}\">{{status}}</span></div>\n</div>",
        "templateCss": "@keyframes spin {\n  100% { transform: rotate(360deg); }\n}\n\n#container {\n    padding: 10px;\n}\n\n.svg-wrapper {\n    position: relative;\n    width: 130px;\n    height: 130px;\n}\n\n.svg_2, .svg2 {\n  width: 100%;\n  height: 100%;\n}\n\n#svg_2 {\n  fill: #2c3e50;\n}\n\n.svg_1 {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  animation: spin linear infinite;\n}\n\n#svg_1 {\n  /*fill: green*/\n  /* fill: #a41313; */\n}\n\n.value-container {\n    flex-grow: 1;\n    margin: auto;\n    text-align: center;\n}\n.value-container span {\n    margin-right: 10px;\n    font-size: 48px;\n}",
        "controllerScript": "var scope, speed, increment, flag;\n\nself.onInit = function() {\n    scope = self.ctx.$scope;\n    $timeout = scope.$injector.get('$timeout');\n    speed = 0;\n    increment = 0;\n}\n\nself.onDataUpdated = function() {\n    if(!angular.isUndefined(self.ctx.defaultSubscription.data[0].data[0])) {\n        scope.status = self.ctx.defaultSubscription.data[0].data[0][1];\n        if(scope.status == \"ON\") {\n            window.globalFlag = true;\n            flag = false;\n            $timeout(function() {\n                window.requestAnimationFrame(actionStatus);\n            });\n        }\n    }\n}\n\nfunction actionStatus() {\n    speed += increment;\n    angular.element('.svg_1').css('transform', 'rotate(' + speed + 'deg)');\n    if(scope.status == 'ON') {\n        if(increment < 10) {\n            increment += 0.025;\n        }\n    } else if(scope.status == \"OFF\") {\n        if (!flag) {\n            flag = true;\n            scope.$apply();\n        }\n        if (increment > 0) {\n            increment -= 0.025;\n        } else {\n            return;\n        }\n    }\n    if (window.globalFlag) {\n        window.requestAnimationFrame(actionStatus);\n    } else {\n        return;\n    }\n}\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 1\n    };\n}\n\nself.onDestroy = function() {\n    window.globalFlag = false;\n}\n",
        "settingsSchema": "{}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Sin\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.22676435865325417,\"funcBody\":\"return Math.round(1000*Math.sin(time/5000)) > 500 ? \\\"ON\\\" : \\\"OFF\\\";\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Aeration status\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableDataExport\":true,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "custom_rpc",
      "name": "Custom send RPC",
      "descriptor": {
        "type": "rpc",
        "sizeX": 5,
        "sizeY": 6.5,
        "resources": [],
        "templateHtml": "<form name=\"rpcForm\" ng-submit=\"sendCommand()\">\n    <md-content class=\"md-padding\" layout=\"column\">\n        <md-input-container>\n          <label>RPC method</label>  \n          <input required name=\"rpcMethod\" ng-model=\"rpcMethod\"/>\n          <div ng-messages=\"rpcForm.rpcMethod.$error\">\n            <div ng-message=\"required\">RPC method name is required.</div>\n          </div>\n        </md-input-container>    \n        <md-input-container>\n          <label>RPC params</label>  \n          <input required name=\"rpcParams\" ng-model=\"rpcParams\"/>\n          <div ng-messages=\"rpcForm.rpcParams.$error\">\n            <div ng-message=\"required\">RPC params is required.</div>\n          </div>\n        </md-input-container>    \n        <md-button ng-disabled=\"rpcForm.$invalid || !rpcForm.$dirty\" type=\"submit\"\n                   class=\"md-raised md-primary\">\n            Send RPC command\n        </md-button>\n        <div>\n           <label>RPC command response</label>\n           <div style=\"width: 100%; height: 100px; border: solid 2px gray\" ng-bind-html=\"rpcCommandResponse\">\n           </div>       \n        </div>\n    </md-content>\n  </form>",
        "templateCss": "",
        "controllerScript": "self.onInit = function() {\n    \n    self.ctx.$scope.sendCommand = function() {\n        var rpcMethod = self.ctx.$scope.rpcMethod;\n        var rpcParams = self.ctx.$scope.rpcParams;\n        var timeout = self.ctx.settings.requestTimeout;\n        var oneWayElseTwoWay = self.ctx.settings.oneWayElseTwoWay ? true : false;\n        \n        var commandPromise;\n        if (oneWayElseTwoWay) {\n            commandPromise = self.ctx.controlApi.sendOneWayCommand(rpcMethod, rpcParams, timeout);\n        } else {\n            commandPromise = self.ctx.controlApi.sendTwoWayCommand(rpcMethod, rpcParams, timeout);\n        }\n        commandPromise.then(\n            function success(response) {\n                if (oneWayElseTwoWay) {\n                    self.ctx.$scope.rpcCommandResponse = \"Command was successfully received by device.<br/> No response body because of one way command mode.\";\n                } else {\n                    self.ctx.$scope.rpcCommandResponse = \"Response from device:<br/>\";                    \n                    self.ctx.$scope.rpcCommandResponse += angular.toJson(response);\n                }\n            },\n            function fail(rejection) {\n                self.ctx.$scope.rpcCommandResponse = \"Failed to send command to the device:<br/>\"\n                self.ctx.$scope.rpcCommandResponse += \"Status: \" + rejection.status + \"<br/>\";\n                self.ctx.$scope.rpcCommandResponse += \"Status text: '\" + rejection.statusText + \"'\";\n            }\n            \n        );\n    }\n    \n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"oneWayElseTwoWay\": {\n                \"title\": \"Is One Way Command\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"oneWayElseTwoWay\",\n        \"requestTimeout\"\n    ]\n} ",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Custom RPC\"}"
      }
    },
    {
      "alias": "navigate_to",
      "name": "Navigate to",
      "descriptor": {
        "type": "static",
        "sizeX": 7.5,
        "sizeY": 3,
        "resources": [],
        "templateHtml": "<div flex layout=\"column\">\n    <md-button class=\"md-primary md-raised\" ng-click=\"onButtonClick($event)\">\n        {{ctx.settings.buttonLabel}}\n    </md-button>\n</div>\n",
        "templateCss": "",
        "controllerScript": "self.onInit = function() {\n\n    var scope = self.ctx.$scope;\n    scope.ctx = self.ctx;\n    $scope = self.ctx.$scope;\n    \n    \n    $scope.onButtonClick = function($event) {\n        if ($event) {\n            $event.stopPropagation();\n        }\n        var descriptors = self.ctx.actionsApi.getActionDescriptors('rowClick');\n        \n        self.ctx.actionsApi.handleWidgetAction($event, descriptors[0]);\n    }\n}\n\nself.onDestroy = function() {\n    \n}\n\nself.actionSources = function() {\n    return {\n        'rowClick': {\n            name: 'widget-action.row-click',\n            multiple: false\n        }\n    };\n}",
        "settingsSchema": "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"buttonLabel\": {\n                \"default\":\"no label\",\n                \"type\": \"string\",\n                \"title\": \"Button label\"\n            }\n        }\n    },\n    \"form\": [\n        \"buttonLabel\"   \n    ]\n}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"static\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.15479322438769105,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"rgb(255, 255, 255)\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"buttonLabel\":\"no label\"},\"title\":\"Navigate to\",\"dropShadow\":true,\"enableFullscreen\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"legendCompactMode\":false,\"actions\":{}}"
      }
    },
    {
      "alias": "update_entity_attribute",
      "name": "Update entity attribute",
      "descriptor": {
        "type": "latest",
        "sizeX": 7.5,
        "sizeY": 4.5,
        "resources": [],
        "templateHtml": "<div class=\"md-padding attribute-update-form\" ng-form=\"attrUpdateForm\">\n    <div class=md-padding>\n        <div class=\"entity-title\">\n            {{entityName}}\n        </div>\n        <md-input-container class=\"md-block\" ng-if=\"entityDetected\">\n    \t\t<label>Attribute</label>\n    \t\t<input ng-required=\"true\" name=\"attribute\" ng-model=\"model.key\">\t\n    \t\t<div ng-messages=\"attrUpdateForm.attribute.$error\">\n          \t\t<div ng-message=\"required\">Entity attribute is required</div>\n        \t</div>\t\t\t\t\n    \t</md-input-container>\n    \t<div layout=\"row\" ng-if=\"entityDetected\">\n    \t    <md-input-container flex=\"40\" class=\"md-block\">\n                <label>Value type</label>\n                <md-select ng-model=\"model.type\" required name=\"valueType\">\n                    <md-option ng-repeat=\"type in valueTypes\" ng-value=\"type\">\n                        <md-icon md-svg-icon=\"{{ type.icon }}\"></md-icon>\n                        <span>{{type.name}}</span>\n                    </md-option>\n                </md-select>\n                <div ng-messages=\"attrUpdateForm.valueType.$error\">\n          \t\t    <div ng-message=\"required\">Attribute value type is required</div>\n        \t    </div>\t\n            </md-input-container>\n            <md-input-container ng-if=\"model.type===valueTypes.string\" flex=\"60\" class=\"md-block\">\n                <label>String value</label>\n                <input required name=\"value\" ng-model=\"model.value\">\n                <div ng-messages=\"attrUpdateForm.value.$error\">\n                    <div ng-message=\"required\">Attribute value is required.</div>\n                </div>\n            </md-input-container>\n            <md-input-container ng-if=\"model.type===valueTypes.integer\" flex=\"60\" class=\"md-block\">\n                <label>Integer value</label>\n                <input required name=\"value\" type=\"number\" step=\"1\" ng-pattern=\"/^-?[0-9]+$/\" ng-model=\"model.value\">\n                <div ng-messages=\"attrUpdateForm.value.$error\">\n                    <div ng-message=\"required\">Attribute value is required.</div>\n                    <div ng-message=\"pattern\">Invalid integer value</div>\n                </div>\n            </md-input-container>\n            <md-input-container ng-if=\"model.type===valueTypes.double\" flex=\"60\" class=\"md-block\">\n                <label>Double value</label>\n                <input required name=\"value\" type=\"number\" step=\"any\" ng-model=\"model.value\">\n                <div ng-messages=\"attrUpdateForm.value.$error\">\n                    <div ng-message=\"required\">Attribute value is required.</div>\n                </div>\n            </md-input-container>\n            <div layout=\"column\" layout-align=\"center\" flex=\"60\" ng-if=\"model.type===valueTypes.boolean\">\n                <md-checkbox ng-model=\"model.value\" style=\"margin-bottom: 0px;\">\n                    {{ model.value ? 'True' : 'False' }}\n                </md-checkbox>\n            </div>                    \n    \t</div>\n        <md-button ng-click=\"updateAttribute($event)\" ng-if=\"entityDetected\"\n               ng-disabled=\"$root.loading || attrUpdateForm.$invalid || !attrUpdateForm.$dirty\"\n               class=\"md-raised md-primary\">Update server attribute</md-button>\n    </div>           \n</div>    ",
        "templateCss": ".attribute-update-form {\n    overflow-y: auto;\n    height: 100%;\n}\n\n.entity-title {\n    font-weight: bold;\n    font-size: 22px;\n    padding-top: 12px;\n    padding-bottom: 6px;\n    color: #666;\n}\n\n",
        "controllerScript": "const valueTypes = {\n    string: {\n        value: \"string\",\n        name: \"String\",\n        icon: \"mdi:format-text\"\n    },\n    integer: {\n        value: \"integer\",\n        name: \"Integer\",\n        icon: \"mdi:numeric\"\n    },\n    double: {\n        value: \"double\",\n        name: \"Double\",\n        icon: \"mdi:numeric\"\n    },\n    boolean: {\n        value: \"boolean\",\n        name: \"Boolean\",\n        icon: \"mdi:checkbox-marked-outline\"\n    }\n};\n\nself.onInit = function() {\n    \n    self.ctx.$scope.entityName = \"No entity selected\";\n    \n    self.ctx.$scope.valueTypes = valueTypes;\n    \n    self.ctx.$scope.model = { \n        type: valueTypes.string,\n        key: '',\n        value: ''\n    };\n    \n    if (self.ctx.datasources && self.ctx.datasources.length) {\n        var datasource = self.ctx.datasources[0];\n        if (datasource.type === 'entity') {\n            if (datasource.entityType && datasource.entityId) {\n                self.ctx.$scope.entityName = datasource.entityName;\n                self.ctx.$scope.entityDetected = true;\n            }\n        }\n    }\n    \n    self.ctx.$scope.$watch('model.type', function(newVal, prevVal) {\n        if (newVal != prevVal) {\n            if (self.ctx.$scope.model.type === valueTypes.boolean) {\n                self.ctx.$scope.model.value = false;\n            } else {\n                self.ctx.$scope.model.value = null;\n            }\n        }\n    });\n    \n    self.ctx.$scope.updateAttribute = function ($event) {\n        if (self.ctx.$scope.entityDetected) {\n            var datasource = self.ctx.datasources[0];\n            var attributeService = self.ctx.$scope.$injector.get('attributeService');\n            \n            attributeService.saveEntityAttributes(\n                datasource.entityType,\n                datasource.entityId,\n                'SERVER_SCOPE',\n                [\n                    {\n                        key: self.ctx.$scope.model.key,\n                        value: self.ctx.$scope.model.value\n                    }\n                ]\n            ).then(\n                function success() {\n                    var $mdDialog = self.ctx.$scope.$injector.get('$mdDialog');\n                    $mdDialog.show(\n                      $mdDialog.alert()\n                        .clickOutsideToClose(true)\n                        .title('Attribute updated.')\n                        .textContent('Entity attribute has been successfully updated!')\n                        .ariaLabel('Attribute updated.')\n                        .ok('OK')\n                        .targetEvent($event)\n                    );\n                }\n            );\n        }\n    };\n\n}\n\nself.onDataUpdated = function() {\n}\n\nself.onResize = function() {\n}\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 0,\n        dataKeysOptional: true\n    }\n}\n\nself.onDestroy = function() {\n}\n",
        "settingsSchema": "{}",
        "dataKeySettingsSchema": "{}\n",
        "defaultConfig": "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Update entity attribute\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableDataExport\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
      }
    }
  ]
}